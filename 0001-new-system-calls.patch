From 3bfdb1a5543c645f76fefb13ee657788a96bc3ad Mon Sep 17 00:00:00 2001
From: Jonah Romero <jblt@mit.edu>
Date: Mon, 16 Oct 2023 12:37:30 -0400
Subject: [PATCH] new system calls

---
 arch/arm/kernel/sys_arm.c  | 63 ++++++++++++++++++++++++++++++++++++++
 arch/arm/tools/syscall.tbl |  4 +++
 compile_rasp.sh            |  1 +
 copy_to_boot.sh            |  4 +++
 include/linux/syscalls.h   |  7 ++++-
 kernel/sys.c               |  2 ++
 6 files changed, 80 insertions(+), 1 deletion(-)
 create mode 100755 compile_rasp.sh
 create mode 100755 copy_to_boot.sh

diff --git a/arch/arm/kernel/sys_arm.c b/arch/arm/kernel/sys_arm.c
index a5f183cfe..036c6e1f8 100644
--- a/arch/arm/kernel/sys_arm.c
+++ b/arch/arm/kernel/sys_arm.c
@@ -34,3 +34,66 @@ asmlinkage long sys_arm_fadvise64_64(int fd, int advice,
 {
 	return ksys_fadvise64_64(fd, offset, len, advice);
 }
+
+SYSCALL_DEFINE0(pm_enable_cycle_count)
+{
+    uint32_t pm_control_reg;
+    uint32_t flag = ~((uint32_t)(0));
+    printk(KERN_INFO "Enable Cycle Count Kernel\n");
+    asm volatile("mcr p15, 0, %0, c9, c12, 1"::"r"(flag));
+    printk(KERN_INFO "Enable Cycle Count for User Space");
+    asm volatile("mcr p15, 0, %0, c9, c14, 0"::"r"(flag));
+    asm volatile("mrc p15, 0, %0, c9, c12, 0":"=r"(pm_control_reg));
+    printk(KERN_INFO "PM Control Register:%u", pm_control_reg);
+    // bit 0: 1 enables all counters
+    // bit 1: event counters reset
+    // bit 2: cycle counter reset
+    // bit 3: 1 counts once every 64 clock cycles, 0 counts every cycle
+    // bit 4: 1 enables export of events
+    // bit 5: 1 disables cycle counter if non invasive debug is not permitted
+    //        0 enables cycle counter regardless of non invasive debug auth
+    // we want msb-> 0X0XX1 <-lsb
+    pm_control_reg |= 0x1;
+    pm_control_reg &= ~((uint32_t)(0b101000));
+    asm volatile("mcr p15, 0, %0, c9, c12, 0"::"r"(pm_control_reg));
+    asm volatile("mrc p15, 0, %0, c9, c12, 0":"=r"(pm_control_reg));
+    printk(KERN_INFO "Changed PM Control Register To:%u", pm_control_reg);
+    return 0;
+}
+
+SYSCALL_DEFINE1(pm_cycle_count, uint32_t*, result)
+{
+    uint32_t pm_count;
+    asm volatile("mrc p15, 0, %0, c9, c13, 0":"=r"(pm_count));
+    *result = pm_count;
+    return pm_count;
+}
+
+SYSCALL_DEFINE1(flush_address, void*, addr)
+{
+    asm volatile("mcr p15, 0, %0, c7, c6, 1"::"r"(addr));
+    return 0;
+}
+
+SYSCALL_DEFINE2(flush_address_range, void*, addr, size_t, size)
+{
+    for (int i = 0; i < size; i++) {
+
+    }
+    return 0;
+}
+
+SYSCALL_DEFINE1(get_cache_info, size_t, cache_id, int, is_data_cache)
+{
+    uint32_t cache_size_selection_reg, cache_size_id;
+    if (cache_id >= 7) return -1; // only valid cache ids
+    cache_size_selection_reg = ((uint32_t)cache_id << 1) | !!is_data_cache;
+    asm volatile("mcr p15, 2, %0, c0, c0, 0"::"r"(cache_size_selection_reg));
+    asm volatile("mrc p15, 1, %0, c0, c0, 0":"=r"(cache_size_id));
+    if (!access_ok())
+    {
+
+    }
+}
+
+
diff --git a/arch/arm/tools/syscall.tbl b/arch/arm/tools/syscall.tbl
index ac964612d..2aa2b209d 100644
--- a/arch/arm/tools/syscall.tbl
+++ b/arch/arm/tools/syscall.tbl
@@ -464,3 +464,7 @@
 448	common	process_mrelease		sys_process_mrelease
 449	common	futex_waitv			sys_futex_waitv
 450	common	set_mempolicy_home_node		sys_set_mempolicy_home_node
+451 common  pm_enable_cycle_count       sys_pm_enable_cycle_count
+452 common  pm_cycle_count          sys_pm_cycle_count
+453 common  flush_address           sys_flush_address
+454 common  flush_address_range     sys_flush_address_range
diff --git a/compile_rasp.sh b/compile_rasp.sh
new file mode 100755
index 000000000..7cace3561
--- /dev/null
+++ b/compile_rasp.sh
@@ -0,0 +1 @@
+make -j4 zImage modules dtbs
diff --git a/copy_to_boot.sh b/copy_to_boot.sh
new file mode 100755
index 000000000..777da75d4
--- /dev/null
+++ b/copy_to_boot.sh
@@ -0,0 +1,4 @@
+cp arch/arm/boot/dts/*.dtb /boot/
+cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays
+cp arch/arm/boot/dts/overlays/README /boot/overlays/
+cp arch/arm/boot/zImage /boot/kernel-spectre.img
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a34b0f9a9..b9a6a0d8a 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -308,6 +308,7 @@ static inline void addr_limit_user_check(void)
  * for architectures overriding the syscall calling convention, do not
  * include the prototypes if CONFIG_ARCH_HAS_SYSCALL_WRAPPER is enabled.
  */
+
 #ifndef CONFIG_ARCH_HAS_SYSCALL_WRAPPER
 asmlinkage long sys_io_setup(unsigned nr_reqs, aio_context_t __user *ctx);
 asmlinkage long sys_io_destroy(aio_context_t ctx);
@@ -1057,6 +1058,10 @@ asmlinkage long sys_set_mempolicy_home_node(unsigned long start, unsigned long l
 					    unsigned long home_node,
 					    unsigned long flags);
 
+asmlinkage long sys_flush_address(void*);
+asmlinkage long sys_pm_cycle_count(uint32_t*);
+asmlinkage long sys_pm_enable_cycle_count(void);
+
 /*
  * Architecture-specific system calls
  */
@@ -1269,7 +1274,6 @@ asmlinkage long sys_mmap_pgoff(unsigned long addr, unsigned long len,
 			unsigned long fd, unsigned long pgoff);
 asmlinkage long sys_old_mmap(struct mmap_arg_struct __user *arg);
 
-
 /*
  * Not a real system call, but a placeholder for syscalls which are
  * not implemented -- see kernel/sys_ni.c
@@ -1385,4 +1389,5 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+
 #endif
diff --git a/kernel/sys.c b/kernel/sys.c
index c85e1abf7..1df34f3e4 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -2803,4 +2803,6 @@ COMPAT_SYSCALL_DEFINE1(sysinfo, struct compat_sysinfo __user *, info)
 		return -EFAULT;
 	return 0;
 }
+
 #endif /* CONFIG_COMPAT */
+
-- 
2.30.2

